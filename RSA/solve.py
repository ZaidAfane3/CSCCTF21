'''
Created on Dec 14, 2011
@author: pablocelayes
'''
from Crypto.Util.number import *
import ContinuedFractions, Arithmetic

def hack_RSA(e,n):
    '''
    Finds d knowing (e,n)
    applying the Wiener continued fraction attack
    '''
    frac = ContinuedFractions.rational_to_contfrac(e, n)
    convergents = ContinuedFractions.convergents_from_contfrac(frac)
    
    for (k,d) in convergents:
        
        #check if d is actually the key
        if k!=0 and (e*d-1)%k == 0:
            phi = (e*d-1)//k
            s = n - phi + 1
            # check if the equation x^2 - s*x + n = 0
            # has integer roots
            discr = s*s - 4*n
            if(discr>=0):
                t = Arithmetic.is_perfect_square(discr)
                if t!=-1 and (s+t)%2==0:
                    print("Hacked!")
                    return d

e = 437852729547041033515810270463746550635593282130177253101533273582274331120288395138967432470916951961287906344129462824104555621526353709099422007874899644701964402092125035805768490634722881921742746892226952419198690359758427469663145409201496633397530093224630061532503873409037852514601538944861157296121
n = 487544386321897321616270165135480097538871847269572444258596721152273872798125846620643596325296590410295561119075253833038930802456896268295188061797045916249078641596662934521992138182995359592772865931297046050305202183478774256788061938161417137666222363999432556566318872523977480487636181416979552125481

d = hack_RSA(e,n)
cipher = 314213354848792349059117509036997429440998071441737176784719504765330621419423333272165781345550254799144766744886794104501652957200051053859646606845739784433556534425277081802219450671933204601967180340004201600738878508642567517563557395110174752535378174942039542936361434776651393156489782856384931377250
print(long_to_bytes(pow(cipher, d, n)).decode())