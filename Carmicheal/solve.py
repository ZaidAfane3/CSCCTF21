import ast, math
from Crypto.PublicKey import RSA

N = 143024813891808506591585838550566266630662849854123623070907730887834439452842805361407416917324706928759218462561238829611571638646030813063803783335010286907654858142437721560887796227248267258217037658184088661750548751466015646168337814280471313860657981333613327611917847236292173656799799939734010021451
e = 65537
d = 53284310480833674061067180890956649923772283474041875290283094394881756468569051615181096044271175738477273570378491649965609245604490415059673667911372363394293735630277632560974927923657888437847329657499771251008328054842487785078928369268061131635384647169479724647072388496153424253579167282947133305089

key = RSA.construct((N, e, d))
p, q = key.p, key.q
lam = (p - 1) * (q - 1) // math.gcd(p - 1, q - 1)
d2 = pow(e, -1, lam)
if d2 == d:
    d2 += lam

print(d2)